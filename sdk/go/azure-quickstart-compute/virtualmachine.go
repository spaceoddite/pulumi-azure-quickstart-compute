// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azurequickstartcompute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Virtualmachine struct {
	pulumi.ResourceState
}

// NewVirtualmachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualmachine(ctx *pulumi.Context,
	name string, args *VirtualmachineArgs, opts ...pulumi.ResourceOption) (*Virtualmachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'AdminPassword'")
	}
	if args.AdminUsername == nil {
		return nil, errors.New("invalid value for required argument 'AdminUsername'")
	}
	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.VmSize == nil {
		return nil, errors.New("invalid value for required argument 'VmSize'")
	}
	var resource Virtualmachine
	err := ctx.RegisterRemoteComponentResource("azure-quickstart-compute:index:virtualmachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type virtualmachineArgs struct {
	// admin password
	AdminPassword string `pulumi:"adminPassword"`
	// admin username
	AdminUsername string `pulumi:"adminUsername"`
	// location
	Location string `pulumi:"location"`
	// Name of your virtual machine
	Name string `pulumi:"name"`
	// vmsize
	VmSize string `pulumi:"vmSize"`
}

// The set of arguments for constructing a Virtualmachine resource.
type VirtualmachineArgs struct {
	// admin password
	AdminPassword pulumi.StringInput
	// admin username
	AdminUsername pulumi.StringInput
	// location
	Location pulumi.StringInput
	// Name of your virtual machine
	Name pulumi.StringInput
	// vmsize
	VmSize pulumi.StringInput
}

func (VirtualmachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualmachineArgs)(nil)).Elem()
}

type VirtualmachineInput interface {
	pulumi.Input

	ToVirtualmachineOutput() VirtualmachineOutput
	ToVirtualmachineOutputWithContext(ctx context.Context) VirtualmachineOutput
}

func (*Virtualmachine) ElementType() reflect.Type {
	return reflect.TypeOf((*Virtualmachine)(nil))
}

func (i *Virtualmachine) ToVirtualmachineOutput() VirtualmachineOutput {
	return i.ToVirtualmachineOutputWithContext(context.Background())
}

func (i *Virtualmachine) ToVirtualmachineOutputWithContext(ctx context.Context) VirtualmachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualmachineOutput)
}

func (i *Virtualmachine) ToVirtualmachinePtrOutput() VirtualmachinePtrOutput {
	return i.ToVirtualmachinePtrOutputWithContext(context.Background())
}

func (i *Virtualmachine) ToVirtualmachinePtrOutputWithContext(ctx context.Context) VirtualmachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualmachinePtrOutput)
}

type VirtualmachinePtrInput interface {
	pulumi.Input

	ToVirtualmachinePtrOutput() VirtualmachinePtrOutput
	ToVirtualmachinePtrOutputWithContext(ctx context.Context) VirtualmachinePtrOutput
}

type virtualmachinePtrType VirtualmachineArgs

func (*virtualmachinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Virtualmachine)(nil))
}

func (i *virtualmachinePtrType) ToVirtualmachinePtrOutput() VirtualmachinePtrOutput {
	return i.ToVirtualmachinePtrOutputWithContext(context.Background())
}

func (i *virtualmachinePtrType) ToVirtualmachinePtrOutputWithContext(ctx context.Context) VirtualmachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualmachinePtrOutput)
}

// VirtualmachineArrayInput is an input type that accepts VirtualmachineArray and VirtualmachineArrayOutput values.
// You can construct a concrete instance of `VirtualmachineArrayInput` via:
//
//          VirtualmachineArray{ VirtualmachineArgs{...} }
type VirtualmachineArrayInput interface {
	pulumi.Input

	ToVirtualmachineArrayOutput() VirtualmachineArrayOutput
	ToVirtualmachineArrayOutputWithContext(context.Context) VirtualmachineArrayOutput
}

type VirtualmachineArray []VirtualmachineInput

func (VirtualmachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Virtualmachine)(nil)).Elem()
}

func (i VirtualmachineArray) ToVirtualmachineArrayOutput() VirtualmachineArrayOutput {
	return i.ToVirtualmachineArrayOutputWithContext(context.Background())
}

func (i VirtualmachineArray) ToVirtualmachineArrayOutputWithContext(ctx context.Context) VirtualmachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualmachineArrayOutput)
}

// VirtualmachineMapInput is an input type that accepts VirtualmachineMap and VirtualmachineMapOutput values.
// You can construct a concrete instance of `VirtualmachineMapInput` via:
//
//          VirtualmachineMap{ "key": VirtualmachineArgs{...} }
type VirtualmachineMapInput interface {
	pulumi.Input

	ToVirtualmachineMapOutput() VirtualmachineMapOutput
	ToVirtualmachineMapOutputWithContext(context.Context) VirtualmachineMapOutput
}

type VirtualmachineMap map[string]VirtualmachineInput

func (VirtualmachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Virtualmachine)(nil)).Elem()
}

func (i VirtualmachineMap) ToVirtualmachineMapOutput() VirtualmachineMapOutput {
	return i.ToVirtualmachineMapOutputWithContext(context.Background())
}

func (i VirtualmachineMap) ToVirtualmachineMapOutputWithContext(ctx context.Context) VirtualmachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualmachineMapOutput)
}

type VirtualmachineOutput struct{ *pulumi.OutputState }

func (VirtualmachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Virtualmachine)(nil))
}

func (o VirtualmachineOutput) ToVirtualmachineOutput() VirtualmachineOutput {
	return o
}

func (o VirtualmachineOutput) ToVirtualmachineOutputWithContext(ctx context.Context) VirtualmachineOutput {
	return o
}

func (o VirtualmachineOutput) ToVirtualmachinePtrOutput() VirtualmachinePtrOutput {
	return o.ToVirtualmachinePtrOutputWithContext(context.Background())
}

func (o VirtualmachineOutput) ToVirtualmachinePtrOutputWithContext(ctx context.Context) VirtualmachinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Virtualmachine) *Virtualmachine {
		return &v
	}).(VirtualmachinePtrOutput)
}

type VirtualmachinePtrOutput struct{ *pulumi.OutputState }

func (VirtualmachinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Virtualmachine)(nil))
}

func (o VirtualmachinePtrOutput) ToVirtualmachinePtrOutput() VirtualmachinePtrOutput {
	return o
}

func (o VirtualmachinePtrOutput) ToVirtualmachinePtrOutputWithContext(ctx context.Context) VirtualmachinePtrOutput {
	return o
}

func (o VirtualmachinePtrOutput) Elem() VirtualmachineOutput {
	return o.ApplyT(func(v *Virtualmachine) Virtualmachine {
		if v != nil {
			return *v
		}
		var ret Virtualmachine
		return ret
	}).(VirtualmachineOutput)
}

type VirtualmachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualmachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Virtualmachine)(nil))
}

func (o VirtualmachineArrayOutput) ToVirtualmachineArrayOutput() VirtualmachineArrayOutput {
	return o
}

func (o VirtualmachineArrayOutput) ToVirtualmachineArrayOutputWithContext(ctx context.Context) VirtualmachineArrayOutput {
	return o
}

func (o VirtualmachineArrayOutput) Index(i pulumi.IntInput) VirtualmachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Virtualmachine {
		return vs[0].([]Virtualmachine)[vs[1].(int)]
	}).(VirtualmachineOutput)
}

type VirtualmachineMapOutput struct{ *pulumi.OutputState }

func (VirtualmachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Virtualmachine)(nil))
}

func (o VirtualmachineMapOutput) ToVirtualmachineMapOutput() VirtualmachineMapOutput {
	return o
}

func (o VirtualmachineMapOutput) ToVirtualmachineMapOutputWithContext(ctx context.Context) VirtualmachineMapOutput {
	return o
}

func (o VirtualmachineMapOutput) MapIndex(k pulumi.StringInput) VirtualmachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Virtualmachine {
		return vs[0].(map[string]Virtualmachine)[vs[1].(string)]
	}).(VirtualmachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualmachineInput)(nil)).Elem(), &Virtualmachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualmachinePtrInput)(nil)).Elem(), &Virtualmachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualmachineArrayInput)(nil)).Elem(), VirtualmachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualmachineMapInput)(nil)).Elem(), VirtualmachineMap{})
	pulumi.RegisterOutputType(VirtualmachineOutput{})
	pulumi.RegisterOutputType(VirtualmachinePtrOutput{})
	pulumi.RegisterOutputType(VirtualmachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualmachineMapOutput{})
}
